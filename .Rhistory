tabla #### Debería cambiar los valores de mediana porque son todo 0!!!
tabla #### Debería cambiar los valores de mediana porque son todo 0!!!
welch_var <- gene_names[gene_names != "AQ_IL6"]
welch_var <- genes_names[genes_names != "AQ_IL6"]
tstudent_var <- "AQ_IL6"
View(anova_df)
# Creo un data frame para este análisis
welch_t_df<-cbind(genes_data, edad_cat=data$edad_cat)
View(data)
#Creo la variable categórica para edad
mediana_edad <- median(data$edad)
data$edad_cat <- cut(data$edad,
breaks = c(-Inf, mediana_edad, Inf),
labels = c("<P50", "≥P50"),
right = TRUE)
# Creo un data frame para este análisis
welch_t_df<-cbind(genes_data, edad_cat=data$edad_cat)
welch_t_df$edad_cat <- as.factor(welch_t_df$edad_cat)
welch_var <- genes_names[genes_names != "AQ_IL6"]
tstudent_var <- "AQ_IL6"
tabla <- welch_t_df %>%
tbl_strata(tbl_summary(by=edad_cat,
statistic = all_continuous() ~ "{median} ({p25} - {p75})") %>%
add_p(test = list(all_of(welch_var) ~ "t.test",
all_of(tstudent_var) ~ "t.test"),
pvalue_fun = ~ style_pvalue(.x, digits = 3))
)
tabla <- welch_t_df %>%
tbl_strata(
strata = edad_cat,
.tbl_fun = ~ .x %>%
tbl_summary(
statistic = all_continuous() ~ "{median} ({p25} - {p75})"
) %>%
add_p(
test = list(
all_of(welch_var) ~ "t.test",
all_of(tstudent_var) ~ "t.test"
),
pvalue_fun = ~ style_pvalue(.x, digits = 3)
)
)
# Crear un data frame vacío con las columnas requeridas en el enunciado del ej 2 b)
resultado_welch <- data.frame(Variable = character(length(genes_names)),
Edad_cat_inferior_P50 = numeric(length(genes_names)),
Edad_cat_superior_P50 = numeric(length(genes_names)),
P_valor = numeric(length(genes_names)),
stringsAsFactors = FALSE) # Buena práctica en el uso de dataframes
for (gene in gene_names) {
# Hacer la prueba t-Student o de Welch
if (gene != "AQ_IL6" ) {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, equal.var = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, equal.var = FALSE)
}
# Obtener y guardar el valor p
p_value <- resultado_prueba$p.value
resultado_welch <- rbind(resultado_welch, data.frame(Variable = gene, P_valor = p_value, stringsAsFactors = FALSE))
}
for (gene in genes_names) {
# Hacer la prueba t-Student o de Welch
if (gene != "AQ_IL6" ) {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, equal.var = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, equal.var = FALSE)
}
# Obtener y guardar el valor p
p_value <- resultado_prueba$p.value
resultado_welch <- rbind(resultado_welch, data.frame(Variable = gene, P_valor = p_value, stringsAsFactors = FALSE))
}
# Crear un data frame vacío con las columnas requeridas en el enunciado del ej 2 b)
resultado_welch <- data.frame(Variable = character(length(genes_names)),
Edad_cat_inferior_P50 = numeric(length(genes_names)),
Edad_cat_superior_P50 = numeric(length(genes_names)),
P_valor = numeric(length(genes_names)),
stringsAsFactors = FALSE) # Buena práctica en el uso de dataframes
for (gene in genes_names) {
# Hacer la prueba t-Student o de Welch
if (gene != "AQ_IL6" ) {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, equal.var = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, equal.var = FALSE)
}
# Obtener y guardar el valor p
p_value <- resultado_prueba$p.value
resultado_welch <- rbind(resultado_welch, data.frame(Variable = gene, P_valor = p_value, stringsAsFactors = FALSE))
}
# Iterar sobre cada gen
for (gene in genes_names) {
# Ejecutar la prueba t-Student o de Welch
if (gene != "AQ_IL6") {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = FALSE)
}
# Obtener valores deseados
p_value <- resultado_prueba$p.value
# Calcular mediana para cada grupo de edad
mediana_inferior <- median(welch_t_df[[gene]][welch_t_df$edad_cat == "inferior"], na.rm = TRUE)
mediana_superior <- median(welch_t_df[[gene]][welch_t_df$edad_cat == "superior"], na.rm = TRUE)
# Añadir fila al data frame
resultado_welch <- rbind(
resultado_welch,
data.frame(
Variable = gene,
Edad_cat_inferior_P50 = mediana_inferior,
Edad_cat_superior_P50 = mediana_superior,
P_valor = p_value,
stringsAsFactors = FALSE
)
)
}
View(resultado_welch)
anyNA(genes_names)
anyNA(welch_t_df)
# Asegúrate de que `genes_names` esté definido
genes_names <- c("nombre_del_gen1", "nombre_del_gen2")  # Ajusta con los nombres correctos
# Crear un data frame vacío
resultado_welch <- data.frame(
Variable = character(0),
Edad_cat_inferior_P50 = numeric(0),
Edad_cat_superior_P50 = numeric(0),
P_valor = numeric(0),
stringsAsFactors = FALSE
)
# Iterar sobre cada gen
for (gene in genes_names) {
# Ejecutar la prueba t-Student o de Welch
if (gene != "AQ_IL6") {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = FALSE)
}
# Obtener el valor p con 3 decimales
p_value <- round(resultado_prueba$p.value, 3)
# Calcular mediana para cada grupo de edad
mediana_inferior <- median(welch_t_df[[gene]][welch_t_df$edad_cat == "inferior"], na.rm = TRUE)
mediana_superior <- median(welch_t_df[[gene]][welch_t_df$edad_cat == "superior"], na.rm = TRUE)
# Añadir fila al data frame
resultado_welch <- rbind(
resultado_welch,
data.frame(
Variable = gene,
Edad_cat_inferior_P50 = mediana_inferior,
Edad_cat_superior_P50 = mediana_superior,
P_valor = p_value,
stringsAsFactors = FALSE
)
)
}
print(setdiff(genes_names, names(welch_t_df)))
View(genes_data)
# Asegúrate de que `genes_names` esté definido
genes_names<- colnames(genes_data)  # Ajusta con los nombres correctos
# Crear un data frame vacío
resultado_welch <- data.frame(
Variable = character(0),
Edad_cat_inferior_P50 = numeric(0),
Edad_cat_superior_P50 = numeric(0),
P_valor = numeric(0),
stringsAsFactors = FALSE
)
# Iterar sobre cada gen
for (gene in genes_names) {
# Ejecutar la prueba t-Student o de Welch
if (gene != "AQ_IL6") {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = FALSE)
}
# Obtener el valor p con 3 decimales
p_value <- round(resultado_prueba$p.value, 3)
# Calcular mediana para cada grupo de edad
mediana_inferior <- median(welch_t_df[[gene]][welch_t_df$edad_cat == "inferior"], na.rm = TRUE)
mediana_superior <- median(welch_t_df[[gene]][welch_t_df$edad_cat == "superior"], na.rm = TRUE)
# Añadir fila al data frame
resultado_welch <- rbind(
resultado_welch,
data.frame(
Variable = gene,
Edad_cat_inferior_P50 = mediana_inferior,
Edad_cat_superior_P50 = mediana_superior,
P_valor = p_value,
stringsAsFactors = FALSE
)
)
}
# Mostrar resultados
print(resultado_welch)
View(welch_t_df)
#Creo dos bases de datos en función de la edad
#Edad inferior a la mediana
var_inferior_edad <- welch_t_df %>%
filter(edad_cat < mediana_edad)
View(var_inferior_edad)
#Creo dos bases de datos en función de la edad
#Edad inferior a la mediana
var_inferior_edad <- welch_t_df [edad_cat==<P50,]
#Creo dos bases de datos en función de la edad
#Edad inferior a la mediana
var_inferior_edad <- welch_t_df [edad_cat== "<P50",]
#Creo dos bases de datos en función de la edad
#Edad inferior a la mediana
var_inferior_edad <- welch_t_df [welch_t_df$edad_cat== "<P50",]
View(var_inferior_edad)
var_superior_edad <- welch_t_df [welch_t_df$edad_cat== "≥P50",]
anyNA(var_inferior_edad)
anyNA(var_superior_edad)
var_inferior_edad <- var_inferior_edad [,-47]
anyNA(var_inferior_edad)
var_superior_edad <- var_superior_edad [,-47]
anyNA(var_superior_edad)
# Calcular mediana para cada grupo de edad
medianas_inferior <- apply(var_inferior_edad, 2, median, na.rm = TRUE)
# Calcular mediana para cada grupo de edad
for (gene in genes_names) {
# Verificar si la columna existe en ambos data frames
if (gene %in% colnames(var_inferior_edad)) {
# Calcular la mediana en el grupo de edad inferior
mediana_inferior <- median(var_inferior_edad[[gene]], na.rm = TRUE)
medianas_inferior[[gene]] <- mediana_inferior
}
if (gene %in% colnames(var_superior_edad)) {
# Calcular la mediana en el grupo de edad superior
mediana_superior <- median(var_superior_edad[[gene]], na.rm = TRUE)
medianas_superior[[gene]] <- mediana_superior
}
}
# Calcular mediana para cada grupo
mediana_inferior <- if (gene %in% colnames(var_inferior_edad)) {
median(var_inferior_edad[[gene]], na.rm = TRUE)
} else {
NA
}
# Calcular mediana para cada grupo
for (gene in var_inferior_edad) {
mediana_inferior <- median(var_inferior_edad[[gene]], na.rm = TRUE)}
# Calcular la mediana para cada columna en var_inferior_edad
median_inferior_values <- numeric(ncol(var_inferior_edad))
for (i in seq_along(var_inferior_edad)) {
median_inferior_values[i] <- median(var_inferior_edad[[i]], na.rm = TRUE)
}
# Calcular la mediana para cada columna en var_superior_edad
median_superior_values <- numeric(ncol(var_superior_edad))
for (i in seq_along(var_superior_edad)) {
median_superior_values[i] <- median(var_superior_edad[[i]], na.rm = TRUE)
}
# Almacenar resultados en el data frame
resultado_welch[i, ] <- c(gene, mediana_inferior, mediana_superior, p_value)
View(resultado_welch)
View(resultado_welch)
####################################################################
# Iterar sobre cada gen y calcular las estadísticas
for (i in seq_along(genes_names)) {
gene <- genes_names[i]
# Medianas para cada grupo según el gen
if (gene %in% colnames(var_inferior_edad)) {
mediana_inferior <- median(var_inferior_edad[[gene]], na.rm = TRUE)
} else {
mediana_inferior <- NA
}
if (gene %in% colnames(var_superior_edad)) {
mediana_superior <- median(var_superior_edad[[gene]], na.rm = TRUE)
} else {
mediana_superior <- NA
}
# Calcular el p-valor
if (gene != "AQ_IL6") {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = FALSE)
}
p_value <- round(resultado_prueba$p.value, 3)
# Almacenar resultados en el data frame
resultado_welch[i, ] <- c(gene, mediana_inferior, mediana_superior, p_value)
}
View(resultado_welch)
# Iterar sobre cada gen y calcular las estadísticas
for (i in seq_along(genes_names)) {
gene <- genes_names[i]
# Medianas y RIC para cada grupo según el gen
if (gene %in% colnames(var_inferior_edad)) {
q_inferior <- quantile(var_inferior_edad[[gene]], c(0.25, 0.5, 0.75), na.rm = TRUE)
mediana_inferior <- paste0(round(q_inferior[2], 2), " (", round(q_inferior[1], 2), "-", round(q_inferior[3], 2), ")")
} else {
mediana_inferior <- NA
}
if (gene %in% colnames(var_superior_edad)) {
q_superior <- quantile(var_superior_edad[[gene]], c(0.25, 0.5, 0.75), na.rm = TRUE)
mediana_superior <- paste0(round(q_superior[2], 2), " (", round(q_superior[1], 2), "-", round(q_superior[3], 2), ")")
} else {
mediana_superior <- NA
}
# Calcular el p-valor
if (gene != "AQ_IL6") {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = TRUE)
} else {
resultado_prueba <- t.test(welch_t_df[[gene]] ~ welch_t_df$edad_cat, var.equal = FALSE)
}
p_value <- round(resultado_prueba$p.value, 3)
# Almacenar resultados en el data frame
resultado_welch[i, ] <- c(gene, mediana_inferior, mediana_superior, p_value)
}
print(resultado_welch)
View(resultado_welch)
nombres_con_significancia <- resultado_welch[as.numeric(resultado_welch[, 4]) < 0.05, 1]
print()
nombres_significativos <- resultado_welch[as.numeric(resultado_welch[, 4]) < 0.05, 1]
print(nombres_significativos)
nombres_significativos <- resultado_welch[as.numeric(resultado_welch[, 4]) < 0.05, 1]
print(nombres_significativos)
BiocManager::install.packages("signifinder")
BiocManager::install("signifinder")
BiocManager::install("signifinder")
BiocManager::install(version = "3.19")
BiocManager::install("signifinder")
install.packages("C:/Users/lulim/Downloads/signifinder_1.9.3.zip", repos = NULL, type = "win.binary")
library(signifinder)
install.packages("SpatialExperiment")
BiocManager::install("SpatialExperiment")
library(signifinder)
install.packages("patchwork")
library(signifinder)
BiocManager::install("AnnotationDbi")
library(signifinder)
BiocManager::install("ComplexHeatmap")
library(signifinder)
install.packages("DGEobj.utils")
library(signifinder)
BiocManager::install("GSVA")
library(signifinder)
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(signifinder)
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
library(signifinder)
BiocManager::install("consensusOV")
install.packages("consensusOV")
library(signifinder)
devtools::install_github("bhklab/consensusOV")
install.packages("devtools")
devtools::install_github("bhklab/consensusOV")
install.packages("Rtools")
session.info()
Session.info()
sessionInfo()
data_raw <- read.csv('data.tsv', sep = "\t", header = TRUE)
clinical <- read.csv('clinical.tsv', sep = "\t", header = TRUE)
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
pacman::p_load(biomaRt)
# Extraer los identificadores de genes de la primera fila en data
gene_ids <- as.character(data_raw[1,-1])
print(head(gene_ids))
anyNA(gene_ids)
# Eliminar el sufijo en los gene_ids
gene_ids <- sub("\\..*$", "", gene_ids)
# Conectar con Ensembl usando biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl") # Human genes (GRCh38.p14)
# Obtener el diccionario
gene_dic <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "entrezgene_id", "gene_biotype"),
filters = "ensembl_gene_id",
values = gene_ids,
mart = ensembl)
View(data_raw)
print(head(gene_dic))
# Eliminar el paquete biomaRt al terminar
detach("package:biomaRt", unload = TRUE)
# Revisar cuántos protein-coding tengo en el diccionario
table(gene_dic$gene_biotype,useNA = "ifany") # 20455
# Quedarme solo con los genes protein coding en el diccionario
gene_dic_PC <- gene_dic %>%
filter(gene_biotype == "protein_coding")
library(dplyr)
# Quedarme solo con los genes protein coding en el diccionario
gene_dic_PC <- gene_dic %>%
filter(gene_biotype == "protein_coding")
gene_ens_pc <- gene_dic_PC$ensembl_gene_id
# Filtrar los nombres que están en 'gene_ids'
filtered_names <- gene_ids[gene_ids %in% gene_ens_pc] # tengo 19897 protein coding de 60591 genes en data_raw.
# Armar el df de forma más clara y quedándome sólo con los protein coding
data_pc <- data_raw[-c(1,2),-1]
rownames(data_pc)<-data_raw[-c(1,2),1]
filtered_names<- gene_dic_PC$external_gene_name
data_pc <- data_pc[, colnames(data_pc) %in% gene_dic_PC$external_gene_name] # en este caso me quedo con 18757 genes!!!! No con 19897 como en el primer ejemplo
# Buscar si hay genes duplicados
t_data_pc <- t(data_pc)
t_data_pc <- as.data.frame(t_data_pc)
t_data_pc$name <- rownames(t_data_pc)
duplicated_gene_info <- t_data_pc %>%
group_by(name) %>%
filter(n() > 1)
# Mostrar los resultados
print(duplicated_gene_info)
# 0 observaciones 134 columnas ---> no hay duplicados
rm(t_data_pc)
rm(duplicated_gene_info)
# Buscar si hay muestras duplicadas
temp_data_pc <- data_pc
temp_data_pc$samples<- rownames(data_pc)
duplicated_gene_info <- temp_data_pc %>%
group_by(samples) %>%
filter(n() > 1)
# Mostrar los resultados
print(duplicated_gene_info)
# 0 observaciones 18 758 columnas ----> no hay duplicados
rm(temp_data_pc)
# Carga de datos clínicos
clin <- read_excel('C:/Users/lulim/OneDrive/Escritorio/SCAN B Data/SCANB_clinical_data_original_41523_2022_465_MOESM2_ESM.xlsx')
library(dplyr)
library(readxl)
library(DeSeq2)
# Carga de datos clínicos
clin <- read_excel('C:/Users/lulim/OneDrive/Escritorio/SCAN B Data/SCANB_clinical_data_original_41523_2022_465_MOESM2_ESM.xlsx')
# Filtrado de datos. Nos quedamos sólo con muestras de TNBC.
clin_tnbc <- clin %>% filter(ClinGroup == "TNBC")
View(clin_tnbc)
table(clin_tnbc$OS_event)
# Guardar los datos
saveRDS(scanb_tnbc, 'C:/scanb_tnbc.rds')
# Carga de datos de conteo (FPKM)
load('C:/Users/lulim/OneDrive/Escritorio/SCAN B Data/SCANB.9206.genematrix_noNeg.Rdata')
ls()
dim(SCANB.9206.genematrix_noNeg) # 19675  9206
# Filtrado de datos. Nos quedamos sólo con muestras de TNBC.
clin_tnbc <- clin %>% filter(ClinGroup == "TNBC")
unique_patients <- unique(clin_tnbc$Patients)
unique_patients <- unique(clin_tnbc$Patient)
length(unique_patients)
id_tnbc <- clin_tnbc[[1]]
scanb <- as.data.frame(SCANB.9206.genematrix_noNeg)
scanb_tnbc <- scanb %>% select(all_of(id_tnbc))
scanb_tnbc <- as.data.frame(t(scanb_tnbc))
threshold <- nrow(scanb_tnbc) * 0.2
filtered_scanb_tnbc <- scanb_tnbc %>%
select(where(~ sum(. == 0) <= threshold)) # Se me reduce en 3971 columnas.
rm(filtered_scanb_tnbc)
scanb_tnbc <- scanb_tnbc %>%
select(where(~ sum(. == 0) <= threshold)) # Se me reduce en 3971 columnas.
# Guardar los datos
saveRDS(scanb_tnbc, 'C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez/data/scanb_tnbc.rds')
saveRDS(clin_tnbc, 'C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez/data/clin_tnbc.rds')
# Inputpaths
metadata_inputpath <- "C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez/data/ext_data/clin_tnbc.rds" #Pregunta: metadata es datos clínicos?
counts_inputpath <- "C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez/data/ext_data/scanb_tnbc.rds"
# Outputpaths
outputdir <- "data/data_partitions/"
# Load data
metadata <- readRDS(metadata_inputpath)
counts <- readRDS(counts_inputpath)
# Make names
names(metadata) <- make.names(names(metadata))
# Define partitions
smpSize <- floor(0.9 * nrow(metadata))
set.seed(55)
trainIdx <- sample(seq_len(nrow(metadata)), size = smpSize)
# Split into train and test
metadata_train <- metadata[trainIdx, ]
metadata_test <- metadata[-trainIdx, ]
counts_train <- counts[trainIdx, ]
counts_test <- counts[-trainIdx, ]
# Save partitions
saveRDS(metadata_train, file.path(outputdir, "metadata_train.rds"))
# Outputpaths
outputdir <- "C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez/data/data_partitions/"
# Save partitions
saveRDS(metadata_train, file.path(outputdir, "metadata_train.rds"))
saveRDS(metadata_test, file.path(outputdir, "metadata_test.rds"))
saveRDS(counts_train, file.path(outputdir, "counts_train.rds"))
saveRDS(counts_test, file.path(outputdir, "counts_test.rds"))
# Feature selection with FCBF
source("R/utils.R")
require(FCBF)
install.packages(FCBF)
BiocManager::install(FCBF)
install.packages('FCBF')
BiocManager::install('FCBF)
counts_train <- counts[trainIdx, ]
''
install.packages('FCBF')
BiocManager::install("FCBF")
install.packages('devtools')
devtools::install_github("lubianat/FCBF")
install.packages("AnnotationDbi")
BiocManager::install("AnnotationDbi")
BiocManager::install("org.Hs.eg.db")
library(FCBF)
library(org.Hs.eg.db)
library(AnnotationDbi)
wd()
getwd()
setwd("C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez")
getwd()
# Inputpaths
metadata_inputpath <- "data/data_partitions/metadata_train.rds"
counts_inputpath <- "data/data_partitions/counts_train.rds"
# Inputpaths
metadata_inputpath <- "data/data_partitions/metadata_train.rds"
counts_inputpath <- "data/data_partitions/counts_train.rds"
# Outputpaths
outputpath <- "data/tnbc_signature/tnbc_annot.rds"
# Arguments
min_su <- 0.0025
# Load data
counts_train <- readRDS(counts_inputpath)
metadata_train <- readRDS(metadata_inputpath)
# Run FCBF
data_fcbf <- fast.cor.FS(
x = counts_train,
y = metadata_train$vital_status,
min_su = min_su
)
