---
title: "Draft_TFM_Lucia_Martinez_Rodriguez"
author: "Lucía Martínez Rodríguez"
format: html
editor: visual
---

```{r}
path <- 'C:/Users/lulim/OneDrive/Documentos/GitHub/TFM-Lucia-Martinez-Rodriguez'
setwd(path)
```

## Insalación de paquetes

Nota: cuando tenga acabado el script pasaré todas las instalaciones aquí. Por ahora, prefiero tenerlo en los chunk que necesitan de cada paquete.

```{r}
library(dplyr)
```

## Carga y preprocesado de datos CPTAC

### Versión más chapucera
```{r}
data_raw <- read.csv('data.tsv', sep = "\t", header = TRUE)
clinical <- read.csv('clinical.tsv', sep = "\t", header = TRUE)

if (!requireNamespace("pacman", quietly = TRUE)) {
  install.packages("pacman")
}
pacman::p_load(biomaRt)

# Conectar con Ensembl usando biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl") # Human genes (GRCh38.p14) 

# Obtener el diccionario

# gene_data <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "entrezgene_id", "gene_biotype"),
#                    filters = "ensembl_gene_id",
#                    values = gene_ids,
#                    mart = ensembl)

gene_dic <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "entrezgene_id", "gene_biotype"),
                   mart = ensembl)

print(head(gene_dic))

# Eliminar el paquete biomaRt al terminar
detach("package:biomaRt", unload = TRUE)

# Revisar cuántos protein-coding tengo en el diccionario
table(gene_dic$gene_biotype,useNA = "ifany") # 24057

# Extraer los identificadores de genes de la primera fila en data
gene_ids <- as.character(data_raw[1,-1])
print(head(gene_ids))
anyNA(gene_ids)

# Eliminar el sufijo en los gene_ids
gene_ids <- sub("\\..*$", "", gene_ids)

# Quedarme solo con los genes protein coding en el diccionario
gene_dic_PC <- gene_dic %>%
  filter(gene_biotype == "protein_coding")
gene_ens_pc <- gene_dic_PC$ensembl_gene_id

# Filtrar los nombres que están en 'gene_ids_pc'
filtered_names <- gene_ids[gene_ids %in% gene_ens_pc] # tengo 19897 protein coding de 60591 genes en data.

# Armar el df de forma más clara y quedándome sólo con los protein coding
rownames(data_raw)<-data_raw[,1]
data<-data_raw[-2,-1]
colnames(data) <- data[1, ]
data <- data[-1, ]
colnames(data)<-sub("\\..*$", "", colnames(data))

data_pc<- data [,colnames(data)%in%filtered_names] 
head(data_pc)

# # Buscar si hay muestras duplicadas
# 
# # Filtrar filas con símbolos duplicados
# duplicated_gene_info <- data_pc %>%
#   group_by(colnames(data_pc)) %>%
#   filter(n() > 1)
# 
# # Mostrar los resultados
# print(duplicated_gene_info)
# detach("package:dplyr", unload = TRUE)


```

Conclusión: obtengo 133 muestras con 19897 genes codificantes de proteínas.

### Versión más limpia (creo)
```{r}
data_raw <- read.csv('data.tsv', sep = "\t", header = TRUE)
clinical <- read.csv('clinical.tsv', sep = "\t", header = TRUE)

if (!requireNamespace("pacman", quietly = TRUE)) {
  install.packages("pacman")
}
pacman::p_load(biomaRt)

# Extraer los identificadores de genes de la primera fila en data
gene_ids <- as.character(data_raw[1,-1])
print(head(gene_ids))
anyNA(gene_ids)

# Eliminar el sufijo en los gene_ids
gene_ids <- sub("\\..*$", "", gene_ids)

# Conectar con Ensembl usando biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl") # Human genes (GRCh38.p14) 

# Obtener el diccionario
gene_dic <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "entrezgene_id", "gene_biotype"),
                   filters = "ensembl_gene_id",
                   values = gene_ids,
                   mart = ensembl)

print(head(gene_dic))

# Eliminar el paquete biomaRt al terminar
detach("package:biomaRt", unload = TRUE)

# Revisar cuántos protein-coding tengo en el diccionario
table(gene_dic$gene_biotype,useNA = "ifany") # 20455

# Quedarme solo con los genes protein coding en el diccionario
gene_dic_PC <- gene_dic %>%
  filter(gene_biotype == "protein_coding")
gene_ens_pc <- gene_dic_PC$ensembl_gene_id

# Filtrar los nombres que están en 'gene_ids'
filtered_names <- gene_ids[gene_ids %in% gene_ens_pc] # tengo 19897 protein coding de 60591 genes en data_raw.

# Armar el df de forma más clara y quedándome sólo con los protein coding
data_pc <- data_raw[-c(1,2),-1]
filtered_names<- gene_dic_PC$external_gene_name
data_pc <- data_pc[, colnames(data_pc) %in% gene_dic_PC$external_gene_name] # en este caso me quedo con 18757 genes!!!! No con 19897 como en el primer ejemplo

# Buscar si hay genes duplicados
t_data_pc <- t(data_pc)
t_data_pc <- as.data.frame(t_data_pc)
t_data_pc$name <- rownames(t_data_pc)

duplicated_gene_info <- t_data_pc %>%
  group_by(name) %>%
  filter(n() > 1)

# Mostrar los resultados
print(duplicated_gene_info)

# 0 observaciones 134 columnas ---> no hay duplicados

rm(t_data_pc)
rm(duplicated_gene_info)

# Buscar si hay muestras duplicadas
temp_data_pc <- data_pc
temp_data_pc$samples<- rownames(data_pc)

duplicated_gene_info <- temp_data_pc %>%
  group_by(samples) %>%
  filter(n() > 1)

# Mostrar los resultados
print(duplicated_gene_info)

# 0 observaciones 18 758 columnas ----> no hay duplicados

rm(temp_data_pc)

```



## Carga y preprocesado de datos TCGA

```{r}
pacman::p_load(TCGAbiolinks)
library(SummarizedExperiment)

query <- GDCquery(project = 'TCGA-BRCA',
                  data.category = "Transcriptome Profiling",
                  data.type = "Gene Expression Quantification",
                  experimental.strategy = "RNA-Seq",
                  workflow.type = "STAR - Counts")

GDCdownload(query, method = "api") # Descarga de los datos por API

data <- GDCprepare(query) # Convierte los datos descargados en un formato listo para análisis, compatible con R

mrna = assay(data) #`assay(data)` devuelve una matriz donde las filas corresponden a genes y las columnas a muestras.

dim(mrna) #60660 1231 

meta = colData(data)

data.conteos <- as.data.frame(t(mrna)) # Transponen la matriz para que queden muestras en filas y genes en columnas.
```




# Por hacer:

### PAM50 call

```{r}
library(signifinder)
# library(genefu)
library(AIMS)
```